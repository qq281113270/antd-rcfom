import { IBaseModel } from '../BaseModel';
import GraphModel from '../GraphModel';
import { Point, AdditionData, EdgeAttribute, EdgeData, MenuConfig, EdgeConfig } from '../../type/index';
import { ElementState, ModelType, ElementType } from '../../constant/constant';
declare class BaseEdgeModel implements IBaseModel {
    readonly id: string;
    readonly BaseType = ElementType.EDGE;
    state: number;
    modelType: ModelType;
    additionStateData: AdditionData;
    graphModel: GraphModel;
    menu?: MenuConfig[];
    text: {
        value: string;
        x: number;
        y: number;
        draggable: boolean;
        editable: boolean;
    };
    type: string;
    properties: {};
    sourceNodeId: string;
    targetNodeId: string;
    startPoint: any;
    endPoint: any;
    strokeWidth: number;
    stroke: string;
    strokeDashArray: string;
    outlineColor: string;
    outlineStrokeDashArray: string;
    strokeOpacity: number;
    zIndex: number;
    isSelected: boolean;
    isHovered: boolean;
    isHitable: boolean;
    hoverStroke: string;
    selectedStroke: string;
    points: string;
    pointsList: any[];
    draggable: boolean;
    constructor(data: EdgeConfig, graphModel: GraphModel, type: any);
    initEdgeData(data: any): void;
    setAttributes(): void;
    get sourceNode(): import("..").BaseNodeModel;
    get targetNode(): import("..").BaseNodeModel;
    get textPosition(): Point;
    move(): void;
    getBeginAnchor(sourceNode: any, targetNode: any): Point;
    getEndAnchor(targetNode: any): Point;
    getProperties(): {};
    getData(): EdgeData;
    setProperty(key: any, val: any): void;
    setProperties(properties: any): void;
    updateData(edgeAttribute: EdgeAttribute): void;
    formatText(data: any): void;
    moveText(deltaX: number, deltaY: number): void;
    setText(textConfig: any): void;
    updateText(value: string): void;
    setAnchors(): void;
    setSelected(flag?: boolean): void;
    setHovered(flag?: boolean): void;
    setHitable(flag?: boolean): void;
    setElementState(state: ElementState, additionStateData?: AdditionData): void;
    updateStroke(color: any): void;
    updateStrokeWidth(width: any): void;
    updateStartPoint(anchor: any): void;
    updateEndPoint(anchor: any): void;
    setStyleFromTheme(type: any, graphModel: any): void;
    setZIndex(zindex?: number): void;
    initPoints(): void;
    updateAttributes(attributes: any): void;
}
export { BaseEdgeModel };
export default BaseEdgeModel;
